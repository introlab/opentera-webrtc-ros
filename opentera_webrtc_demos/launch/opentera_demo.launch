<launch>
    <arg name="signaling_server_hostname" default=""/>
    <arg name="signaling_server_port" default="8080"/>
    <arg name="signaling_server_password" default="abc"/>
    <arg name="model" default="waffle" doc="model type [burger, waffle, waffle_pi]"/>
    <arg name="centered_robot" default="true"/>
    <arg name="robot_vertical_offset" default="180"/>
    <arg name="map_refresh_rate" default="5.0"/>
    <arg name="rviz" default="false"/>
    <arg name="is_stand_alone" default="false"/>
    
    <arg name="pulse_audio_source" default="alsa_input.pci-0000_00_1b.0.analog-stereo" />
    <arg name="pulse_audio_sink" default="alsa_output.pci-0000_00_1b.0.analog-stereo" />
    <!--arg name="pulse_audio_sink" default="default" /-->
    <arg name="ec_volume_percent" default="90" />
    <arg name="echo_cancellation_dest" default="odas_echo_cancelled"/>
    <arg name="use_echo_cancellation" default="false"/>

    <arg name="output" default="screen"/>

    <!-- Turtlebot simulator -->
    <include file="$(find opentera_webrtc_demos)/launch/opentera_turtlebot_sim.launch">
        <arg name="model" value="$(arg model)" />
        <arg name="open_rviz" value="$(arg rviz)" />
        <arg name="output" value="$(arg output)"/>
    </include>

    <!-- Map image generator -->
    <include file="$(find map_image_generator)/launch/map_image_generator.launch" >
        <arg name="refresh_rate_param" value="$(arg map_refresh_rate)"/>
        <arg name="input_global_path_topic" value="/move_base/NavfnROS/plan"/>
        <arg name="centered_robot" value="$(arg centered_robot)"/>
        <arg name="robot_vertical_offset" value="$(arg robot_vertical_offset)"/>
        <arg name="output" value="$(arg output)"/>
    </include>

    <!-- Front camera -->
    <include file="$(find opentera_webrtc_ros)/launch/ros_stream_client.launch">
        <arg name="name" value="topic_streamer1"/>
        <arg name="output" value="$(arg output)"/>
        <arg name="is_stand_alone" value="$(arg is_stand_alone)"/>
        <arg name="can_send_audio_stream" value="true"/>
        <arg name="can_receive_audio_stream" value="true"/>
        <arg name="can_send_video_stream" value="true"/>
        <arg name="can_receive_video_stream" value="true"/>
        <arg name="is_screen_cast" value="false"/>
        <arg name="needs_denoising" value="false"/>
        <arg name="server_url" value="http://$(arg signaling_server_hostname):$(arg signaling_server_port)"/>
        <arg name="client_name" value="Robot Camera 1"/>
        <arg name="room_name" value="VideoConf"/>
        <arg name="room_password" value="$(arg signaling_server_password)"/>
        <arg name="input_camera_topic" value="/front_camera/image_raw"/>
        <arg name="input_audio_topic" value="/audio_out"/>
    </include>

    <!-- Bottom camera -->
    <include file="$(find opentera_webrtc_ros)/launch/ros_stream_client.launch">
        <arg name="name" value="topic_streamer2"/>
        <arg name="output" value="$(arg output)"/>
        <arg name="is_stand_alone" value="$(arg is_stand_alone)"/>
        <arg name="can_send_audio_stream" value="false"/>
        <arg name="can_receive_audio_stream" value="false"/>
        <arg name="can_send_video_stream" value="true"/>
        <arg name="can_receive_video_stream" value="false"/>
        <arg name="is_screen_cast" value="false"/>
        <arg name="needs_denoising" value="false"/>
        <arg name="server_url" value="http://$(arg signaling_server_hostname):$(arg signaling_server_port)"/>
        <arg name="client_name" value="Robot Camera 2"/>
        <arg name="room_name" value="CameraX"/>
        <arg name="room_password" value="$(arg signaling_server_password)"/>
        <arg name="input_camera_topic" value="/r200/rgb/image_raw"/>
    </include>

    <!-- Map image stream -->
    <include file="$(find opentera_webrtc_ros)/launch/ros_stream_client.launch">
        <arg name="name" value="topic_streamer3"/>
        <arg name="output" value="$(arg output)"/>
        <arg name="is_stand_alone" value="$(arg is_stand_alone)"/>
        <arg name="can_send_audio_stream" value="false"/>
        <arg name="can_receive_audio_stream" value="false"/>
        <arg name="can_send_video_stream" value="true"/>
        <arg name="can_receive_video_stream" value="false"/>
        <arg name="is_screen_cast" value="false"/>
        <arg name="needs_denoising" value="false"/>
        <arg name="server_url" value="http://$(arg signaling_server_hostname):$(arg signaling_server_port)"/>
        <arg name="client_name" value="Map image"/>
        <arg name="room_name" value="Map"/>
        <arg name="room_password" value="$(arg signaling_server_password)"/>
        <arg name="input_camera_topic" value="/map_image_generator/image"/>
    </include>
    
    <!-- Audio Playback (must be started before capture so echo cancel can work)-->
    <!-- Sound -->
    <node pkg="audio_utils" type="playback_node" name="playback_node" respawn="true" output="screen">
        <param name="backend" value="pulse_audio"/>
        <!--param name="backend" value="alsa"/-->
        <param unless="$(arg use_echo_cancellation)" name="device" value="$(arg pulse_audio_sink)"/>
        <param if="$(arg use_echo_cancellation)" name="device" value="$(arg echo_cancellation_dest)_ec_sink"/>
        <param name="format" value="signed_16"/>
        <param name="channel_count" value="1"/>
        <param name="sampling_frequency" value="48000"/>
        <param name="frame_sample_count" value="480"/>
        <param name="latency_us" value="10000"/>
        <remap from="audio_in" to="audio_mixed"/>
    </node>

    <!-- Audio Capture -->
    <!-- Sound -->
    <node pkg="audio_utils" type="capture_node" name="capture_node" output="screen" launch-prefix="bash -c 'sleep 5; $0 $1 $2 $3 $4 $5 $6' ">
        <param name="backend" value="pulse_audio"/>
        <param unless="$(arg use_echo_cancellation)" name="device" value="$(arg pulse_audio_source)"/>
        <param if="$(arg use_echo_cancellation)" name="device" value="$(arg echo_cancellation_dest)_ec"/>
        <param name="format" value="signed_16"/>
        <param name="channel_count" value="2"/>
        <param name="sampling_frequency" value="48000"/>
        <param name="frame_sample_count" value="4800"/>
        <param name="merge" value="true"/>
        <param name="gain" value="0.5"/>
        <param name="latency_us" value="10000"/>
        <rosparam param="channel_map">[front-left,front-right]</rosparam>
    </node>

    <!-- Data Channel  -->
    <include file="$(find opentera_webrtc_ros)/launch/ros_data_channel_client.launch">
        <arg name="name" value="data_streamer"/>
        <arg name="output" value="$(arg output)"/>
        <arg name="is_stand_alone" value="$(arg is_stand_alone)"/>

        <arg name="server_url" value="http://$(arg signaling_server_hostname):$(arg signaling_server_port)"/>
        <arg name="client_name" value="Robot Data Channel"/>
        <arg name="room_name" value="Teleop"/>
        <arg name="room_password" value="$(arg signaling_server_password)"/>
    </include>

    <!-- Json Message Handler -->
    <include file="$(find opentera_webrtc_ros)/launch/ros_json_data_handler.launch">
        <arg name="name" value="json_data_handler"/>
        <arg name="output" value="$(arg output)"/>
        <arg name="input_topic" value="/webrtc_data_incoming"/>
        <arg name="linear_multiplier" value="0.5"/>
        <arg name="angular_multiplier" value="0.35"/>
    </include>

    <!-- Robot status simulated data -->
    <node name="robot_status" type="robot_status.py" pkg="opentera_webrtc_demos" />

    <node pkg="opentera_webrtc_robot_gui" type="opentera_webrtc_robot_gui_node" name="robot_gui" output="$(arg output)" respawn="true"/>

</launch>
